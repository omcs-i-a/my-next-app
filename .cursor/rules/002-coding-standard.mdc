---
description: このファイルには、プロジェクト内でコードを記述する際のスタイルガイドが含まれています。インデントの規則や命名規則、コメントの書き方、エラーハンドリングの基準、コードのフォーマットに関するルールを定義しています。これらのスタイルガイドに従うことで、コードの可読性が向上し、プロジェクトの一貫性が保たれます。
globs: 
alwaysApply: false
---

# Next.jsアプリケーション コーディングスタンダード

このファイルでは、Next.jsアプリケーションのコーディングスタンダードを定義します。これらのスタイルガイドに従うことで、コードの可読性が向上し、プロジェクトの一貫性が保たれます。

## 1. TypeScript 規約

### 型定義
- **明示的な型定義**: 関数の引数と戻り値には明示的な型を指定する
- **interface vs type**: 拡張可能性が必要な場合は `interface`、そうでない場合は `type` を使用
- **Genericsの活用**: 汎用的なコンポーネントやユーティリティには適切にジェネリクスを使用

```typescript
// 良い例
interface User {
  id: string;
  name: string;
  email?: string;
}

type AuthProviders = 'google' | 'github' | 'credentials';

function fetchUserData<T>(url: string): Promise<T> {
  // ...
}
```

### null/undefined の扱い
- オプショナルな値には `undefined` を使用し、`null` の使用は最小限に抑える
- オプショナルチェーン演算子 (`?.`) と Nullish coalescing 演算子 (`??`) を活用

## 2. React/Next.js コンポーネント

### コンポーネント設計
- **関数コンポーネント**: クラスコンポーネントではなく関数コンポーネントを使用
- **適切な粒度**: 一つのコンポーネントは一つの責務を持つように設計
- **フォルダ構成**: 関連するコンポーネントは同じディレクトリにまとめる

```tsx
// 良い例
export default function UserMenu({ user }: { user: User }) {
  // ...
}
```

### Props の取り扱い
- **分割代入**: props は分割代入で受け取る
- **デフォルト値**: 必要に応じてデフォルト値を設定
- **children**: React.ReactNode 型を使用

```tsx
// 良い例
export default function Button({
  children,
  variant = 'primary',
  onClick
}: {
  children: React.ReactNode;
  variant?: 'primary' | 'secondary';
  onClick?: () => void;
}) {
  // ...
}
```

## 3. ファイル構成とインポート

### ファイル命名
- **コンポーネント**: PascalCase (`UserProfile.tsx`)
- **ユーティリティ/フック**: camelCase (`useAuth.ts`)
- **ページコンポーネント**: `page.tsx`
- **レイアウトコンポーネント**: `layout.tsx`

### インポート順序
1. 外部ライブラリ (React, Next.js など)
2. 内部コンポーネント
3. 型定義
4. ユーティリティ関数
5. スタイル

```tsx
// 良い例
import { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import { Button } from '@/components/Button';
import { User } from '@/types';
import { formatDate } from '@/utils/date';
import styles from './styles.module.css';
```

## 4. API と非同期処理

### エラーハンドリング
- try/catch ブロックを使用した適切なエラーハンドリング
- エラーメッセージはユーザーフレンドリーなものを表示

```typescript
// 良い例
try {
  const data = await fetchData();
  return data;
} catch (error) {
  console.error('データ取得中にエラーが発生しました:', error);
  throw new Error('データを取得できませんでした。後でもう一度お試しください。');
}
```

### API ルート
- HTTP メソッドごとに適切な関数を実装
- 適切なステータスコードとレスポンス形式を使用

```typescript
// 良い例
export async function GET(request: Request) {
  try {
    // データ取得ロジック
    return Response.json({ data });
  } catch (error) {
    return Response.json(
      { error: 'データ取得に失敗しました' },
      { status: 500 }
    );
  }
}
```

## 5. 認証とセキュリティ

### 認証処理
- 認証状態は useSession フックを使用して管理
- 保護されたルートには適切なミドルウェアを使用

```typescript
// middleware.ts の例
export function middleware(request: NextRequest) {
  const path = request.nextUrl.pathname;
  const isPublicPath = publicPaths.includes(path);
  const token = request.cookies.get('next-auth.session-token')?.value || '';

  if (!token && !isPublicPath) {
    return NextResponse.redirect(new URL('/auth/signin', request.url));
  }
}
```

### セキュリティ対策
- ユーザー入力の検証
- XSS対策（Reactの自動エスケープ機能を活用）
- CSRF対策

## 6. コメントとドキュメンテーション

### コードコメント
- **自明でないコード**: 複雑なロジックには適切なコメントを記述
- **TODO/FIXME**: 一時的な対応や将来の改善点には適切なタグを使用
- **JSDoc**: 公開APIやユーティリティ関数にはJSDocスタイルのコメントを記述

```typescript
/**
 * ユーザーの認証状態をチェックし、認証されていない場合はリダイレクトする
 * @param {User | null} user - 現在のユーザー情報
 * @returns {boolean} 認証済みかどうか
 */
function checkAuthentication(user: User | null): boolean {
  // ...
}
```

## 7. テスト

### ユニットテスト
- 独立した小さなテストケース
- モックを活用した外部依存の切り離し

### コンポーネントテスト
- レンダリング結果の検証
- ユーザーインタラクションのシミュレーション

## 8. Docker開発

### Dockerfile/docker-compose.yml
- マルチステージビルドの活用
- 最小限の依存関係
- 適切なキャッシュ戦略

### 環境変数
- 開発/本番環境で適切に分離
- シークレット情報は .env.local に格納（GitHubには登録しない）

## 9. データセキュリティとプライバシー

### クライアントコンポーネントへのデータ受け渡し
- **DTOパターン**: サーバーからクライアントへデータを渡す際はDTOパターンを使用し、必要最小限の情報のみを含める
- **機密情報の除外**: パスワードハッシュ、トークン、内部ID参照などの機密情報は絶対にクライアントに渡さない
- **明示的なフィールド選択**: PrismaなどのORMを使用する際は`select`句を明示的に指定し、必要なフィールドのみを取得する

```typescript
// 良い例: DTOを使用した安全なデータ受け渡し
type UserDTO = {
  id: string;
  name: string;
  email: string;
};

function toUserDTO(user: User): UserDTO {
  return {
    id: user.id,
    name: user.name,
    email: user.email,
    // パスワードハッシュなどは含めない
  };
}

// 良い例: Prismaでのselect句の明示
const users = await prisma.user.findMany({
  select: {
    id: true,
    name: true,
    email: true,
    // パスワードハッシュは選択しない
  }
});

// 悪い例: 全フィールドの取得と受け渡し
const user = await prisma.user.findUnique({
  where: { id: userId }
});
return user; // 機密情報も含めて全て返してしまう
```

### APIレスポンスのセキュリティ
- エラーメッセージには詳細な内部情報や例外スタックトレースを含めない
- ユーザー入力は常にバリデーションを行い、安全な形で処理する
- セキュリティ関連の設定や認証情報をクライアントサイドのコードに含めない

### データアクセス制御
- サーバーアクションやAPIエンドポイントでは、認証・認可チェックを必ず行う
- 別ユーザーのデータにアクセスできないよう、所有権の確認を厳格に行う
- データベースクエリにはユーザーIDによるフィルタリングを常に含める

## サーバーアクションにおけるセキュリティルール

サーバーアクションを実装する際は、以下のセキュリティルールを遵守してください：

1. **セッション管理**
   - クライアントから直接ユーザーIDを受け取らず、必ずセッションから取得する
   - 認証済みセッションの取得には `getAuthSession()` を使用する
   - ユーザーIDの取得には `getSessionUserId()` を使用する

2. **権限チェック**
   - リソース操作前に必ず権限チェックを行う
   - 権限チェックには `checkPermission()` を使用する
   - 管理者専用機能には `getAdminSession()` を使用する

3. **データ検証**
   - フォームからの入力は必ずサニタイズする
   - Zodによるスキーマバリデーションを実施する
   - バリデーションエラーは適切にクライアントに返す

4. **データ転送**
   - データベースモデルを直接クライアントに送信しない
   - 適切なDTOに変換してから返す
   - パスワードやセキュリティ情報はDTOから常に除外する

5. **エラーハンドリング**
   - 例外はキャッチして適切にログに記録する
   - セキュリティ関連のエラーは詳細をクライアントに漏らさない
   - エラーレスポンスは統一されたフォーマットで返す

6. **キャッシュ管理**
   - データ更新後は `revalidatePath()` でキャッシュを適切に更新する
   - セキュリティに関わる情報はキャッシュしない

7. **トランザクション**
   - 複数の関連データ操作には必ずトランザクションを使用する

## 10. ページコンポーネントの認証・認可チェック

各ページコンポーネントでは、ミドルウェアによるグローバルな保護に加えて、コンポーネント内でも認証・認可チェックを実装する必要があります。これにより、多層的な防御を実現し、不正アクセスによる機密情報の漏洩を防止します。

### サーバーコンポーネントでの認証チェック

```typescript
// 良い例: サーバーコンポーネントでの認証チェック
export default async function ProtectedPage() {
  // 認証チェック - 未認証ユーザーはログインページにリダイレクト
  const session = await getAuthSession();
  
  // 必要に応じて権限チェック
  if (requiredPermission && !hasPermission(session, requiredPermission)) {
    redirect('/unauthorized');
  }
  
  // 以下、認証済みユーザー向けコンテンツ
}
```

### クライアントコンポーネントでの認証チェック

```typescript
// 良い例: クライアントコンポーネントでの認証チェック
'use client';

export default function ProtectedClientPage() {
  const router = useRouter();
  const { data: session, status } = useSession();
  
  // 認証状態が解決するまでローディング表示
  if (status === 'loading') {
    return <LoadingView />;
  }
  
  // 未認証ユーザーをリダイレクト
  if (status === 'unauthenticated') {
    router.push(`/login?callbackUrl=${encodeURIComponent(window.location.pathname)}`);
    return null;
  }
  
  // 以下、認証済みユーザー向けコンテンツ
}
```

### 認証・認可チェックのベストプラクティス

1. **早期チェック**: ページコンポーネントの先頭でチェックを行い、条件を満たさない場合は早期にリダイレクト
2. **コールバックURL**: ログインリダイレクト時にはコールバックURLを含めて、認証後に元のページに戻れるようにする
3. **公開/非公開の分離**: 同じページ内に公開情報と非公開情報がある場合は、認証状態に応じて表示内容を分ける
4. **エラーメッセージ**: 権限エラーの場合は詳細な理由を表示せず、一般的なメッセージを表示する
5. **非同期処理の考慮**: データ取得中やセッション確認中は適切なローディング状態を表示

### 認証状態に応じたUI表示

```tsx
// 良い例: 認証状態に応じたUI表示
export default function ConditionalContent() {
  const { data: session } = useSession();
  const isAuthenticated = !!session;
  
  return (
    <div>
      <h1>コンテンツタイトル</h1>
      
      {/* 公開コンテンツ（全ユーザーに表示） */}
      <PublicContent />
      
      {/* 認証済みユーザーのみに表示するコンテンツ */}
      {isAuthenticated ? (
        <PrivateContent user={session.user} />
      ) : (
        <LoginPrompt />
      )}
    </div>
  );
}
```

### セキュリティ考慮事項

1. **多層的な防御**: ミドルウェアとページコンポーネントの両方でチェックを行う
2. **機密情報の保護**: クライアントに送信するデータは認証状態に応じて厳格にフィルタリングする
3. **権限変更の即時反映**: セッションやトークンの変更が即座に権限に反映されるようにする
4. **パフォーマンスへの影響**: 頻繁なセッションチェックによるパフォーマンス低下に注意する
