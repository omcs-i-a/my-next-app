---
description: このファイルには、プロジェクト内でコードを記述する際のスタイルガイドが含まれています。インデントの規則や命名規則、コメントの書き方、エラーハンドリングの基準、コードのフォーマットに関するルールを定義しています。これらのスタイルガイドに従うことで、コードの可読性が向上し、プロジェクトの一貫性が保たれます。
globs: 
alwaysApply: false
---

# Next.jsアプリケーション コーディングスタンダード

このファイルでは、Next.jsアプリケーションのコーディングスタンダードを定義します。これらのスタイルガイドに従うことで、コードの可読性が向上し、プロジェクトの一貫性が保たれます。

## 1. TypeScript 規約

### 型定義
- **明示的な型定義**: 関数の引数と戻り値には明示的な型を指定する
- **interface vs type**: 拡張可能性が必要な場合は `interface`、そうでない場合は `type` を使用
- **Genericsの活用**: 汎用的なコンポーネントやユーティリティには適切にジェネリクスを使用

```typescript
// 良い例
interface User {
  id: string;
  name: string;
  email?: string;
}

type AuthProviders = 'google' | 'github' | 'credentials';

function fetchUserData<T>(url: string): Promise<T> {
  // ...
}
```

### null/undefined の扱い
- オプショナルな値には `undefined` を使用し、`null` の使用は最小限に抑える
- オプショナルチェーン演算子 (`?.`) と Nullish coalescing 演算子 (`??`) を活用

## 2. React/Next.js コンポーネント

### コンポーネント設計
- **関数コンポーネント**: クラスコンポーネントではなく関数コンポーネントを使用
- **適切な粒度**: 一つのコンポーネントは一つの責務を持つように設計
- **フォルダ構成**: 関連するコンポーネントは同じディレクトリにまとめる

```tsx
// 良い例
export default function UserMenu({ user }: { user: User }) {
  // ...
}
```

### Props の取り扱い
- **分割代入**: props は分割代入で受け取る
- **デフォルト値**: 必要に応じてデフォルト値を設定
- **children**: React.ReactNode 型を使用

```tsx
// 良い例
export default function Button({
  children,
  variant = 'primary',
  onClick
}: {
  children: React.ReactNode;
  variant?: 'primary' | 'secondary';
  onClick?: () => void;
}) {
  // ...
}
```

## 3. ファイル構成とインポート

### ファイル命名
- **コンポーネント**: PascalCase (`UserProfile.tsx`)
- **ユーティリティ/フック**: camelCase (`useAuth.ts`)
- **ページコンポーネント**: `page.tsx`
- **レイアウトコンポーネント**: `layout.tsx`

### インポート順序
1. 外部ライブラリ (React, Next.js など)
2. 内部コンポーネント
3. 型定義
4. ユーティリティ関数
5. スタイル

```tsx
// 良い例
import { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import { Button } from '@/components/Button';
import { User } from '@/types';
import { formatDate } from '@/utils/date';
import styles from './styles.module.css';
```

## 4. API と非同期処理

### エラーハンドリング
- try/catch ブロックを使用した適切なエラーハンドリング
- エラーメッセージはユーザーフレンドリーなものを表示

```typescript
// 良い例
try {
  const data = await fetchData();
  return data;
} catch (error) {
  console.error('データ取得中にエラーが発生しました:', error);
  throw new Error('データを取得できませんでした。後でもう一度お試しください。');
}
```

### API ルート
- HTTP メソッドごとに適切な関数を実装
- 適切なステータスコードとレスポンス形式を使用

```typescript
// 良い例
export async function GET(request: Request) {
  try {
    // データ取得ロジック
    return Response.json({ data });
  } catch (error) {
    return Response.json(
      { error: 'データ取得に失敗しました' },
      { status: 500 }
    );
  }
}
```

## 5. 認証とセキュリティ

### 認証処理
- 認証状態は useSession フックを使用して管理
- 保護されたルートには適切なミドルウェアを使用

```typescript
// middleware.ts の例
export function middleware(request: NextRequest) {
  const path = request.nextUrl.pathname;
  const isPublicPath = publicPaths.includes(path);
  const token = request.cookies.get('next-auth.session-token')?.value || '';

  if (!token && !isPublicPath) {
    return NextResponse.redirect(new URL('/auth/signin', request.url));
  }
}
```

### セキュリティ対策
- ユーザー入力の検証
- XSS対策（Reactの自動エスケープ機能を活用）
- CSRF対策

## 6. コメントとドキュメンテーション

### コードコメント
- **自明でないコード**: 複雑なロジックには適切なコメントを記述
- **TODO/FIXME**: 一時的な対応や将来の改善点には適切なタグを使用
- **JSDoc**: 公開APIやユーティリティ関数にはJSDocスタイルのコメントを記述

```typescript
/**
 * ユーザーの認証状態をチェックし、認証されていない場合はリダイレクトする
 * @param {User | null} user - 現在のユーザー情報
 * @returns {boolean} 認証済みかどうか
 */
function checkAuthentication(user: User | null): boolean {
  // ...
}
```

## 7. テスト

### ユニットテスト
- 独立した小さなテストケース
- モックを活用した外部依存の切り離し

### コンポーネントテスト
- レンダリング結果の検証
- ユーザーインタラクションのシミュレーション

## 8. Docker開発

### Dockerfile/docker-compose.yml
- マルチステージビルドの活用
- 最小限の依存関係
- 適切なキャッシュ戦略

### 環境変数
- 開発/本番環境で適切に分離
- シークレット情報は .env.local に格納（GitHubには登録しない）

## 9. データセキュリティとプライバシー

### クライアントコンポーネントへのデータ受け渡し
- **DTOパターン**: サーバーからクライアントへデータを渡す際はDTOパターンを使用し、必要最小限の情報のみを含める
- **機密情報の除外**: パスワードハッシュ、トークン、内部ID参照などの機密情報は絶対にクライアントに渡さない
- **明示的なフィールド選択**: PrismaなどのORMを使用する際は`select`句を明示的に指定し、必要なフィールドのみを取得する

```typescript
// 良い例: DTOを使用した安全なデータ受け渡し
type UserDTO = {
  id: string;
  name: string;
  email: string;
};

function toUserDTO(user: User): UserDTO {
  return {
    id: user.id,
    name: user.name,
    email: user.email,
    // パスワードハッシュなどは含めない
  };
}

// 良い例: Prismaでのselect句の明示
const users = await prisma.user.findMany({
  select: {
    id: true,
    name: true,
    email: true,
    // パスワードハッシュは選択しない
  }
});

// 悪い例: 全フィールドの取得と受け渡し
const user = await prisma.user.findUnique({
  where: { id: userId }
});
return user; // 機密情報も含めて全て返してしまう
```

### APIレスポンスのセキュリティ
- エラーメッセージには詳細な内部情報や例外スタックトレースを含めない
- ユーザー入力は常にバリデーションを行い、安全な形で処理する
- セキュリティ関連の設定や認証情報をクライアントサイドのコードに含めない

### データアクセス制御
- サーバーアクションやAPIエンドポイントでは、認証・認可チェックを必ず行う
- 別ユーザーのデータにアクセスできないよう、所有権の確認を厳格に行う
- データベースクエリにはユーザーIDによるフィルタリングを常に含める

## 10. ロギングとデバッグ

### console.logの使用規約
- **機密情報の出力禁止**: パスワード、トークン、認証情報、APIキーなどの機密情報を直接ログに出力しない
- **ユーザーデータの処理**: ユーザー入力データは全文ではなく長さや構造情報のみをログに出力する
- **構造化ログ**: オブジェクトを出力する場合は`JSON.stringify`を使用せず、必要な情報のみを含む新しいオブジェクトを作成する
- **エラーオブジェクトの扱い**: エラーオブジェクト全体ではなく`error.message`のみを出力する

```typescript
// 悪い例
console.log('ユーザーデータ:', JSON.stringify(user)); // 機密情報を含む全データを出力
console.log('認証トークン:', token); // 認証情報を直接出力
console.error('エラー:', error); // エラーオブジェクト全体を出力

// 良い例
console.log('ユーザーデータ受信:', { 
  id: user.id,
  dataSize: JSON.stringify(user).length 
}); // 安全な情報のみ出力
console.log('認証成功'); // トークン自体は出力しない
console.error('エラー:', error instanceof Error ? error.message : '不明なエラー'); // エラーメッセージのみ出力
```

### 環境別ログ設定
- **開発環境**: デバッグ情報を含む詳細なログを出力可能
- **本番環境**: 最小限の重要情報のみをログに出力し、機密情報は完全に除外
- **条件付きログ**: 本番環境では詳細なデバッグログを出力しないよう条件分岐を使用

```typescript
// 環境に応じたログレベル制御
if (process.env.NODE_ENV !== 'production') {
  console.log('詳細デバッグ情報:', debugInfo);
}

// ログレベルに応じた出力
const logLevel = process.env.LOG_LEVEL || 'info';
if (logLevel === 'debug') {
  console.log('デバッグ情報:', debugInfo);
}
```
