---
description: このファイルには、プロジェクト全体の基本的なルールが定義されています。生成AIや機械学習機能を統合し、ポートフォリオとして展示するために使用する技術スタック、開発環境、コンテナビルド・デプロイメント、データベース接続、セキュリティ管理、CI/CD、テストに関するルールが含まれています。
globs: 
alwaysApply: false
---

## 1. 技術スタック

### フロントエンド
- **Next.js 15.x**: サーバーサイドレンダリングとAPIルート機能を利用
- **React 19.x**: コンポーネントベースのUI構築
- **TypeScript**: 型安全性の確保とコード品質の向上

### バックエンド
- **Next.js API Routes**: RESTful APIエンドポイントの実装
- **Prisma ORM**: データベースアクセス層
- **NextAuth.js**: 認証システム（複数プロバイダー対応）

### データベース
- **PostgreSQL 15.x**: リレーショナルデータベース
- **Prisma Migration**: データベーススキーマバージョン管理

### 開発環境
- **Docker/Docker Compose**: コンテナ化された開発・デプロイメント環境
- **npm**: パッケージ管理

## 2. アーキテクチャ設計

### ディレクトリ構造
```
src/
├── app/                     # Next.js App Router
│   ├── api/                 # APIルート
│   │   └── auth/            # 認証関連API
│   ├── auth/                # 認証関連ページ
│   ├── components/          # 共通コンポーネント
│   ├── layout.tsx           # 共通レイアウト
│   └── middleware.ts        # ルート保護
├── prisma/                  # Prismaスキーマとマイグレーション
└── public/                  # 静的アセット
```

### 認証システム
- JWT認証を使用
- 複数認証プロバイダー対応（Email/Password, Google, GitHub）
- ミドルウェアによるルート保護

## 3. コンテナ化とデプロイメント

### 開発環境
- `docker-compose.yml`による複数サービス管理
- ホットリロード対応のボリュームマウント
- 環境変数による設定

### デプロイメント
- 本番環境ビルドプロセス：`npm run build`
- 静的検証：`npm run lint`

## 4. データベース管理

### 接続設定
- 環境変数による接続文字列管理：`DATABASE_URL`
- コンテナ間ネットワーク通信

### スキーマ管理
- Prismaスキーマによる型安全なモデル定義
- マイグレーションによるバージョン管理
- NextAuth.jsに必要なスキーマ（User, Account, Session, VerificationToken）

## 5. セキュリティ管理

### 認証セキュリティ
- JWTシークレットによるトークン保護
- bcryptによるパスワードハッシュ化
- HTTPS通信の強制（本番環境）

### 環境変数管理
- `.env`ファイルによるシークレット管理
- Dockerの環境変数設定

## 6. テスト戦略
- コンポーネントテスト
- APIエンドポイントテスト
- E2Eテスト

## 7. AI機能統合
- 認証後のパーソナライズされたAI体験
- セキュアなAPIエンドポイント経由での通信
- レスポンスキャッシュによるパフォーマンス最適化

## 8. 開発ワークフロー
- Dockerコンテナを使用した一貫した開発環境
- ホットリロードによる迅速な開発サイクル
- Prisma Studioを活用したデータ管理
