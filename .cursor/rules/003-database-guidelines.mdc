以下に、PrismaとPostgreSQLを使用する際のベストプラクティスを含むガイドラインを示します。これには、データベース設計、接続設定、マイグレーション戦略、セキュリティ対策、パフォーマンス最適化、N+1問題の回避策などが含まれます。

---

**description**:

このファイルには、PrismaとPostgreSQLを使用する際のベストプラクティスが定義されています。データベース設計、接続設定、マイグレーション戦略、セキュリティ対策、パフォーマンス最適化、N+1問題の回避策など、データベース関連の重要な指針を含みます。

**globs**:

- '**/*.ts'

- '**/*.tsx'

**alwaysApply**: false

---

## 1. データベース設計

- **正規化**: データの冗長性を排除し、データの整合性を保つために、適切な正規化を行います。

- **インデックスの使用**: クエリパフォーマンスを向上させるために、頻繁に検索や結合に使用されるカラムにインデックスを設定します。ただし、過剰なインデックスは書き込み性能を低下させる可能性があるため、必要最低限に留めます。

- **リレーションの定義**: テーブル間のリレーションシップを明確に定義し、外部キー制約を適用してデータの整合性を確保します。Prismaのスキーマファイルでリレーションを適切に定義することで、ORMの利点を最大限に活用できます。

## 2. 接続設定

- **環境変数の使用**: データベース接続文字列や認証情報は、環境変数で管理し、ソースコード内にハードコーディングしないようにします。これにより、セキュリティと柔軟性が向上します。

- **接続プールの利用**: 接続プールを使用して、データベース接続の効率性とパフォーマンスを向上させます。Prismaはデフォルトで接続プーリングをサポートしていないため、pg-poolなどの外部ライブラリを使用して実装します。

## 3. マイグレーション戦略

- **マイグレーションツールの使用**: Prismaのマイグレーション機能を使用して、データベーススキーマのバージョン管理を行います。これにより、スキーマの変更履歴を追跡し、一貫性を保つことができます。

- **マイグレーションのテスト**: 本番環境に適用する前に、マイグレーションをテスト環境で検証し、問題がないことを確認します。これにより、予期しないエラーやデータ損失を防止できます。

## 4. セキュリティ対策

- **最小権限の原則**: データベースユーザーには、必要最低限の権限のみを付与し、不必要なアクセスを制限します。これにより、セキュリティリスクを低減できます。

- **暗号化**: 機密性の高いデータは、保存時および転送時に暗号化を行います。SSL/TLSを使用してデータ転送を保護し、保存データの暗号化も検討します。

- **バックアップ**: 定期的なデータベースのバックアップを実施し、災害復旧計画を策定します。バックアップの整合性と復元手順を定期的に検証します。

## 5. パフォーマンス最適化

- **クエリの最適化**: 複雑なクエリや大量のデータを扱うクエリは、効率的に実行されるよう最適化します。クエリプランを確認し、必要に応じてインデックスの追加やクエリのリファクタリングを行います。

- **キャッシング**: 頻繁にアクセスされるデータは、キャッシュを利用してデータベースへの負荷を軽減します。アプリケーションレベルでのキャッシングや、専用のキャッシュサーバーの導入を検討します。

- **N+1問題の回避**: N+1問題とは、関連するデータを取得する際に大量のクエリが発行され、パフォーマンスが低下する問題です。Prismaでは、以下の方法でN+1問題を回避できます。

  - **Eager Loading（積極的読み込み）**: `include`オプションを使用して、関連データを一度のクエリで取得します。

    ```typescript
    const usersWithPosts = await prisma.user.findMany({
      include: {
        posts: true,
      },
    });
    ```

    これにより、ユーザーとその投稿を同時に取得し、クエリ回数を削減できます。

  - **Batching（バッチ処理）**: Prismaは内部でデータローダーを使用しており、同一のリクエスト内で同じクエリが複数回呼ばれた場合、自動的にクエリをバッチ処理してN+1問題を軽減します。

  - **クエリの最適化**: 必要なデータのみを取得するように 
